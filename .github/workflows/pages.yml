###
# ```{rubric} MarkdownLint GitHub Actions
# ```
# ---
# This is a basic workflow to help you get started with Actions
#
# ```{code-block} yaml
# :linenos:
#
# name: markdownlint
# on:
#   push:
#     branches: ['*']
#   pull_request:
#     branches: ['*']
# ```
#
# ```{literalinclude} .github/workflow/pages.yml
# :linenos:
# :language: yaml
# ```
#
# Set a name for the workflow.
name: Test, Build, Deploy to GitHub Pages
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

###
# ```{rubric} Permissions Updates
# ```
# Enable read for contents and issues, and write for checks and PRs.
#
# ```{code-block} yaml
# :linenos:
#
# permissions:
#   contents: read
#   issues: read
#   checks: write
#   pull-requests: write
# ```
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

###
# ```{rubric} Workflow Jobs
# ```
# ---
# A workflow run is made up of one or more
# jobs that can run sequentially or in parallel
#
# ```{code-block} yaml
# :caption: Action job that reports quality of the markdown
# :linenos:
#
# jobs:
#   markdownlint:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@main
#       - name: Set up NodeJS
#         uses: actions/setup-node@main
#       - name: Install the checker
#         run: npm i markdownlint-cli2 markdownlint-cli2-formatter-junit --save-dev
#       - name: Lint the Markdown
#         run: markdownlint-cli2 **/*.md
#       - name: Publish Test Results
#         uses: EnricoMi/publish-unit-test-result-action@v2
#         if: always()
#         with:
#           files: markdownlint-cli2-junit.xml
# ```
jobs:
  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Set up NodeJS
        uses: actions/setup-node@main
      - name: Install the checker
        run: npm i -g markdownlint-cli2 markdownlint-cli2-formatter-junit --save-dev
      - name: Lint the Markdown
        run: |
          shopt -s globstar
          markdownlint-cli2 **/*.md
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: markdownlint-cli2-junit.xml
  ###
  # ```{rubric} Deploy GitHub Pages
  # ```
  # ---
  # Build the pages site using Sphinx and upload the resulting artifact.
  #
  # ```{code-block} yaml
  # :caption: Action job that produces the artifact for deployment.
  # :linenos:
  #
  # build:
  #   needs: markdownlint
  #   runs-on: ubuntu-20.04
  #   permissions:
  #     pages: write
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@main
  #     - uses: actions/setup-python@main
  #       with:
  #         python-version: 3.11
  #         cache: pipenv
  #     - name: Setup pages
  #       uses: actions/configure-pages@main
  #     - name: Install pipenv
  #       run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
  #     - run: pipenv install
  #     - run: pipenv run pip install sphinxcontrib-eval
  #     - run: pipenv run sphinx-build source deploy
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@main
  #       with:
  #         path: './deploy'
  # ```
  build:
    needs: markdownlint
    runs-on: ubuntu-20.04
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-python@main
        with:
          python-version: 3.11
          cache: pipenv
      - name: Setup pages
        uses: actions/configure-pages@main
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - name: Install graphviz
        run: sudo apt-get -y update; sudo apt-get -y install graphviz
      - run: pipenv install
      - run: pipenv run pip install sphinxcontrib-eval
      - run: pipenv run sphinx-build . deploy
      - name: Upload artifact
        uses: actions/upload-pages-artifact@main
        with:
          path: './deploy'
  ###
  # ```{rubric} Deploy Pages
  # ```
  # ---
  # Download the artifact and deploy to pages.
  #
  # ```{code-block} yaml
  # :linenos:
  # :caption: Action job that deploys a pages artifact.
  #
  # pages:
  #   needs: build
  #   runs-on: ubuntu-20.04
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   permissions:
  #     pages: write
  #     id-token: write
  #   steps:
  #     - name: Download pages artifact
  #       id: download
  #       uses: actions/download-artifact@main
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  # ```
  pages:
    needs: build
    runs-on: ubuntu-20.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Download pages artifact
        id: download
        uses: actions/download-artifact@main
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
